@page "/register-streamer"
@using MediatR
@using application.Commands
@using System.Security.Claims
@using System.Web
@using Syncfusion.Blazor.Inputs
@using site.Pages.Registration.Models


<h3>Register Streamer</h3>

<AuthorizeView Context="login">
    <NotAuthorized>
        <div class="row">
            <SfCard CssClass="e-bigger">
                <CardHeader Title="Login" />
                <CardContent>
                    Registering a streamer, whether yourself or someone else requires that you be logged in
                </CardContent>
                <CardFooter>
                    <CardFooterContent>
                        <SfButton CssClass="e-info" @onclick="DoLogin">Login</SfButton>
                    </CardFooterContent>
                </CardFooter>
            </SfCard>
        </div>
    </NotAuthorized>
    <Authorized>
        <EditForm Model="Model" OnValidSubmit="Register">
            <FluentValidationValidator ValidatorType=typeof(RegistrationModelValidator) />
            <div class="col s12">
                <SfTextBox @bind-Value="Model.Name"
                           FloatLabelType="FloatLabelType.Auto"
                           Placeholder="Real Name or Alias" />
                <ValidationMessage For="() => Model.Name" />
            </div>
            <div class="col s12">
                <SfTextBox @bind-Value="Model.Description"
                           FloatLabelType="FloatLabelType.Auto"
                           Placeholder="What do you stream about? What sort of things can people expect?"
                           Multiline="true" />
                <ValidationMessage For="() => Model.Description" />
            </div>
            <div class="col s12">
                <SfCheckBox @bind-Checked="Model.IsStreamer" Label="Are you the streamer being registered?" />
            </div>
            <br />
            <div class="col s12">
                <h5>Platforms</h5>
                <PlatformList @bind-Platforms="Model.Platforms" />
                <ValidationMessage For="() => Model.Platforms" />
            </div>
            <br />
            <div class="col s12">
                <h5>Primary Technologies</h5>
                <SelectTechnology @bind-SelectedTechnologies="Model.Technologies" />
            </div>
            <div class="col s12">
                <button class="btn btn-primary">Register</button>
            </div>
        </EditForm>
    </Authorized>
</AuthorizeView>
@code {

    [Inject]
    public IMediator Mediator { get; set; }
    [Inject]
    public AuthenticationStateProvider AuthenticationProvider { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public RegistrationModel Model { get; set; }

    protected override void OnInitialized()
    {
        Model = new RegistrationModel();
    }

    public async void Register()
    {
        var response = await Mediator.Send(new RegisterNewStreamer
        {
            Name = Model.Name,
            Description = Model.Description,
            IsStreamer = Model.IsStreamer,
            Platforms = Model.Platforms.Select(m => new RegisterNewStreamer.Platform { Name = m.Name, Url = m.Url }),
            Technologies = Model.Technologies
        });

        NavigationManager.NavigateTo("/thankyou");
    }

    public void DoLogin()
    {
        NavigationManager.NavigateTo("login?redirectUri=/register/register-streamer", forceLoad: true);
    }
}