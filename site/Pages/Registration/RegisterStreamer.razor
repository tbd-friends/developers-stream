@page "/register-streamer"
@using MediatR
@using application.Commands
@using System.ComponentModel.DataAnnotations
@using site.Models
@using site.Pages.Registration.PlatformSelection;
@using site.Pages.Registration.TechnologySelection;
@using Syncfusion.Blazor.Inputs

<h3>Register Streamer</h3>

<div class="row">
    <EditForm Model="Model" OnValidSubmit="Register">
        <div class="col s12">
            <SfTextBox @bind-Value="Model.Name"
                       FloatLabelType="FloatLabelType.Auto"
                       Placeholder="Real Name or Alias" />
        </div>
        <div class="col s12">
            <SfTextBox @bind-Value="Model.Description"
                       FloatLabelType="FloatLabelType.Auto"
                       Placeholder="What do you stream about? What sort of things can people expect?"
                       Multiline="true" />
        </div>
        <div class="col s12">
            <PlatformList @bind-Platforms="Model.Platforms" />
        </div>
        <div class="col s12">
            <SelectTechnology SelectedTechnologies="Model.Technologies" />
        </div>
        <div>
            <DataAnnotationsValidator />
            <ValidationSummary />
        </div>
        <div>
            <button class="btn btn-primary">Submit</button>
        </div>
    </EditForm>
</div>
@code {

    [Inject]
    public IMediator Mediator { get; set; }

    public RegistrationModel Model { get; set; } = new RegistrationModel();

    public async void Register()
    {
        await Mediator.Send(new RegisterNewStreamer
        {
            Name = Model.Name,
            Description = Model.Description,
            Platforms = Model.Platforms.Select(m => new RegisterNewStreamer.Platform { Name = m.Name, Url = m.Url })
        });
    }

    public class RegistrationModel
    {

        public string Name { get; set; }

        public string Description { get; set; }

        public List<Platform> Platforms { get; set; } = new List<Platform>();
        public Guid[] Technologies { get; set; } = { };
    }
}