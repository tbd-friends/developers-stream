@using site.Models
@using System.Resources
@using site.Pages.Registration.PlatformSelection.Models
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Buttons;

<div>
    <div>
        <SfDropDownList TValue="string" TItem="PlatformItem"
                        Placeholder="Select a game" @bind-Value="@Model.PlatformName"
                        DataSource="AvailablePlatforms">
            <DropDownListFieldSettings Text="Name" Value="Value"></DropDownListFieldSettings>
        </SfDropDownList>
    </div>
    <div>
        <SfTextBox @bind-Value="@Model.Url" Placeholder="Url" FloatLabelType="FloatLabelType.Auto" />
    </div>
    <div>
        <SfButton OnClick="AddPlatform" IsPrimary="true">Add</SfButton>
    </div>
</div>

@code
{
    [Parameter]
    public EventCallback<Platform> OnPlatformAdded { get; set; }
    public UrlModel Model { get; set; } = new UrlModel();

    public PlatformItem[] AvailablePlatforms =
    {
        new PlatformItem {Name = "Twitch", Value = "twitch", Prefix = "https://twitch.tv/"},
        new PlatformItem {Name = "YouTube", Value = "youtube", Prefix = "https://youtube.com/"},
        new PlatformItem {Name = "Facebook", Value = "facebook", Prefix = "https://facebook.com/"},
        new PlatformItem {Name = "Website", Value = "website"},
        new PlatformItem {Name = "Dev.To", Value = "devto", Prefix = "https://dev.to/"}
    };

    public async Task AddPlatform()
    {
        if (Model.IsValid)
        {
            await OnPlatformAdded.InvokeAsync(new Platform { Name = Model.PlatformName, Url = Model.Url });

            await Reset();
        }
    }

    public async Task Reset()
    {
        await InvokeAsync(() =>
        {
            Model = new UrlModel();

            StateHasChanged();
        });
    }
}
