@using site.Models
@using System.Resources
@using site.Pages.Registration.PlatformSelection.Models
@inject IJSRuntime js;

<div class="row">

    <div class="col s8 l2">
        <MatSelectValue Items="@AvailablePlatforms"
                        @bind-Value="Model.PlatformName"
                        ValueSelector="@(i => i.Value)"
                        FullWidth="true"
                        Label="Platform"
                        @ref="@_selectField">
            <ItemTemplate>
                @context?.Name
            </ItemTemplate>
        </MatSelectValue>
    </div>
    <div class="col s12 l6">
        <MatInputTextComponent @bind-Value="@Model.Url" Label="Url" FullWidth="true" @ref="@_urlField" />
    </div>
    <div class="col s12 l4">
        <MatIconButton OnClick="AddPlatform"
                       Icon="add"
                       Style="margin: 4px auto;"
                       OnClickStopPropagation="true"
                       class="light-blue accent-3"></MatIconButton>
    </div>
</div>

@code
{
    [Parameter]
    public EventCallback<Platform> OnPlatformAdded { get; set; }
    public UrlModel Model { get; set; } = new UrlModel();
    private MatInputTextComponent<string> _urlField;
    private MatSelectValue<string, PlatformItem> _selectField;


    public PlatformItem[] AvailablePlatforms =
    {
        new PlatformItem {Name = "Twitch", Value = "twitch", Prefix = "https://twitch.tv/"},
        new PlatformItem {Name = "YouTube", Value = "youtube", Prefix = "https://youtube.com/"},
        new PlatformItem {Name = "Facebook", Value = "facebook", Prefix = "https://facebook.com/"},
        new PlatformItem {Name = "Website", Value = "website"},
        new PlatformItem {Name = "Dev.To", Value = "devto", Prefix = "https://dev.to"}
    };

    public async Task AddPlatform()
    {
        if (Model.IsValid)
        {
            await OnPlatformAdded.InvokeAsync(new Platform { Name = Model.PlatformName, Url = Model.Url });

            await Reset();
        }
    }

    public async Task Reset()
    {
        await InvokeAsync(() =>
        {
            Model = new UrlModel();

            js.InvokeVoidAsync("focusElement", _urlField.Id);

            StateHasChanged();
        });
    }
}
