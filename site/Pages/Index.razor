@page "/"
@using MediatR
@using viewmodels
@using application.Query
@using System.Timers
@using site.Pages.Components;

<SearchInput OnSearchEntered="DoSearch" />

@if (PagedResult != null)
{
    <div class="row">
        @foreach (var stream in PagedResult.Results)
        {
            <StreamerCard Streamer="stream" />
        }
    </div>

    <Paginator TotalItems="PagedResult.TotalItems" PageSize="PageSize" OnPageChanged="ChangePage" />
}

@code
{
    [Inject]
    private IMediator Mediator { get; set; }
    private PagedResult<StreamViewModel> PagedResult { get; set; }

    private string Term { get; set; }
    public int PageSize = 6;

    protected override async Task OnInitializedAsync()
    {
        PagedResult = await Mediator.Send(new GetStreams() { PageNumber = 1, PageSize = PageSize });
    }

    private void ChangePage(int pageNumber)
    {
        InvokeAsync(async () =>
        {
            PagedResult = await Mediator.Send(new GetStreams { Term = Term, PageNumber = pageNumber, PageSize = PageSize });
        });
    }

    protected async Task DoSearch(string term)
    {
        Term = term;

        await InvokeAsync(async () =>
        {
            PagedResult = await Mediator.Send(new GetStreams { Term = Term, PageNumber = 1, PageSize = PageSize });

            StateHasChanged();
        });                                                                                                                              
    }
}
