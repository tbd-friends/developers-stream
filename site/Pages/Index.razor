@page "/"
@using MediatR
@using viewmodels
@using application.Query
@using site.Pages.Components;

<SearchInput OnSearchEntered="DoSearch" />

<div>
    <SfButton CssClass="e-success" @onclick="@(() => NavigationManager.NavigateTo("/register-streamer"))">Register</SfButton>
</div>

@if (PagedResult != null)
{
    <div class="row">
        @foreach (var stream in PagedResult.Results)
        {
            <div class="col-lg-4 col-md-6 col-sm-12 my-2">
                <SfCard>
                    <CardHeader Title="@stream.Name">
                        <div class="icons">
                            @foreach (var platform in stream.Platforms)
                            {
                                <a href="@(platform.Url)" class="platform-link" target="_blank">
                                    <img src="images/@(platform.Name).svg" title="@(platform.Name)" style="height:2em;" />
                                </a>
                            }
                        </div>
                    </CardHeader>
                    <CardContent Content="@stream.Description" />
                    <CardFooter>
                        <CardFooterContent>
                            @foreach (var technology  in stream.Technologies)
                            {
                                <i class="devicon-@(technology)-original devicon-@(technology)-original-wordmark devicon-@(technology)-plain devicon-@(technology)-line colored" title="@(technology)" />
                            }
                        </CardFooterContent>
                    </CardFooter>
                </SfCard>
            </div>
        }
    </div>
    <Paginator TotalItems="PagedResult.TotalItems" PageSize="PageSize" OnPageChanged="ChangePage" />
}

@code
{
    [Inject]
    private IMediator Mediator { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private PagedResult<StreamerViewModel> PagedResult { get; set; }
    private string Term { get; set; }

    public int PageSize = 4;
    public ClaimStreamer ClaimDialog;

    protected override async Task OnInitializedAsync()
    {
        PagedResult = await Mediator.Send(new SearchStreamers() { PageNumber = 1, PageSize = PageSize });
    }

    private void ChangePage(int pageNumber)
    {
        InvokeAsync(async () =>
        {
            PagedResult = await Mediator.Send(new SearchStreamers { Term = Term, PageNumber = pageNumber, PageSize = PageSize });
        });
    }

    protected async Task DoSearch(string term)
    {
        Term = term;

        await InvokeAsync(async () =>
        {
            PagedResult = await Mediator.Send(new SearchStreamers { Term = Term, PageNumber = 1, PageSize = PageSize });

            StateHasChanged();
        });
    }
}
