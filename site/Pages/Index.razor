@page "/"
@using MediatR
@using viewmodels
@using application.Query
@using System.Timers
@using site.Pages.Components;
@using System.Security.Principal

<SearchInput OnSearchEntered="DoSearch" />

<div>
    <SfButton CssClass="e-success" @onclick="@(() => NavigationManager.NavigateTo("/register-streamer"))">Register</SfButton>
</div>

@if (PagedResult != null)
{
    <div class="flex">
        <div class="streamer-cards">
            @foreach (var stream in PagedResult.Results)
            {
                <StreamerCard Streamer="stream" />
            }
        </div>

        <Paginator TotalItems="PagedResult.TotalItems" PageSize="PageSize" OnPageChanged="ChangePage" />
    </div>
}

@code
{
    [Inject]
    private IMediator Mediator { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }
    
    private PagedResult<StreamerViewModel> PagedResult { get; set; }
    private string Term { get; set; }

    public int PageSize = 2;
    public ClaimStreamer claimDialog;

    protected override async Task OnInitializedAsync()
    {
        PagedResult = await Mediator.Send(new SearchStreamers() { PageNumber = 1, PageSize = PageSize });
    }

    private void ChangePage(int pageNumber)
    {
        InvokeAsync(async () =>
        {
            PagedResult = await Mediator.Send(new SearchStreamers { Term = Term, PageNumber = pageNumber, PageSize = PageSize });
        });
    }

    protected async Task DoSearch(string term)
    {
        Term = term;

        await InvokeAsync(async () =>
        {
            PagedResult = await Mediator.Send(new SearchStreamers { Term = Term, PageNumber = 1, PageSize = PageSize });

            StateHasChanged();
        });
    }
}
