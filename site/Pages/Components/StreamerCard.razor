@using viewmodels
@using MediatR
@using application.Commands
<div class="streamer-card">
    <div class="streamer-card-content">
        <h5 class="streamer-card-title">@Streamer.Name</h5>
        <p class="streamer-card-text">@Streamer.Description</p>

        <div class="streamer-platforms">
            @foreach (var platform in Streamer.Platforms)
            {
                <a href="@(platform.Url)" class="platform-link">
                    <img src="images/@(platform.Name).svg" title="@(platform.Name)" />
                </a>
            }
        </div>
        <div class="streamer-technologies">
            @foreach (var technology in Streamer.Technologies)
            {
                <i class="devicon-@(technology)-original devicon-@(technology)-original-wordmark devicon-@(technology)-plain devicon-@(technology)-line colored" title="@(technology)" />
            }
        </div>
        <AuthorizeView Roles="Streamer">
            @if (!@Streamer.IsStreamManagedByCurrentUser)
            {
                <a @onclick="(() => ClaimStreamer(Streamer.Id))" class="claim-stream-link">This is my stream</a>
            }
        </AuthorizeView>
    </div>
</div>
@code
{
    [Parameter]
    public StreamerViewModel Streamer { get; set; }

    [Inject]
    public IMediator Mediator { get; set; }

    protected async Task ClaimStreamer(Guid streamerId)
    {
        await Mediator.Send(new MakeClaimRequest { ClaimedStreamerId = streamerId });
    }

}
